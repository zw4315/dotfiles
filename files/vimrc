" ------------------------------
" 基础设置
" ------------------------------
set nocompatible
set number
set relativenumber
set autochdir
set hlsearch
set wildmenu
set wildmode=longest:full,full
set path+=**


" 设置 Tab 宽度为 4 个空格
set tabstop=4     " 一个 Tab 显示为 4 个空格
set shiftwidth=4  " 自动缩进时使用 4 个空格
set expandtab     " 将 Tab 转换为空格（按 Tab 键插入空格而非制表符）

" ------------------------------
" 折叠设置：按语法折叠函数块
" ------------------------------
set foldmethod=syntax
set foldlevel=99
set foldenable

" ------------------------------
" 插件系统：vim-plug
" ------------------------------
call plug#begin('~/.vim/plugged')

" 适配 gtags 的插件 
Plug 'ludovicchabant/vim-gutentags'

" 文件导航与快速编辑
Plug 'preservim/nerdtree'              " 文件树
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }  " 模糊搜索
Plug 'junegunn/fzf.vim'
Plug 'preservim/tagbar'

" 语法增强
Plug 'sheerun/vim-polyglot'            " 多语言语法支持（C++增强）
Plug 'octol/vim-cpp-enhanced-highlight' " C++ 类型、模板等额外高亮
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'

" 括号/引号自动补全
Plug 'tpope/vim-surround'
Plug 'szw/vim-maximizer'

" status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'  " 可选：用于美化主题

" add comment
Plug 'tpope/vim-commentary'

" Bookmark
Plug 'MattesGroeger/vim-bookmarks'
call plug#end()

" 配置 Gutentags
let $GTAGSCONF = expand('~/.global/gtags.conf')

let $GTAGSLABEL = 'native-pygments'

let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
augroup GutentagsAutoLoad
  autocmd!
  autocmd BufReadPost * call s:gutentags_set_dbpath()
augroup END

augroup GtagsAutoCwd
  autocmd!
  autocmd BufEnter * if exists('*gutentags#get_project_root') && !empty(expand('%:p')) | execute 'lcd' gutentags#get_project_root(expand('%:p')) | endif
augroup END

function! s:gutentags_set_dbpath() abort
  if !exists('*gutentags#get_project_root')
    echom "gutentags#get_project_root not found"
    return
  endif

  let l:file = expand('%:p')
  if !filereadable(l:file)
    echom "File not readable: " . l:file
    return
  endif

  let l:root = gutentags#get_project_root(l:file)
  if empty(l:root)
    echom "Project root not found"
    return
  endif

  " 去掉前导 /，再做 slug 替换
  let l:slug = substitute(l:root, '^/', '', '')
  let l:slug = substitute(l:slug, '[\/:]', '-', 'g')

  let $GTAGSROOT = l:root
  let $GTAGSDBPATH = expand('~/.cache/tags/' . l:slug)
  " echom "GTAGSDBPATH = " . $GTAGSDBPATH
endfunction

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时支持 ctags 和 gtags
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.ache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 设置 Universal Ctags 参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px', '--c-kinds=+px']
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用自动加载的行为
let g:gutentags_auto_add_gtags_cscope = 1


" autocmd BufReadPost *.c,*.cpp,*.h,*.py call GtagsProjectReload()
" ------------------------------
" 启用插件、语法、配色
" ------------------------------
filetype plugin indent on
syntax enable
"set termguicolors
set notermguicolors
set t_Co=256
colorscheme onedark
"colorscheme gruvbox  " 可改为 gruvbox、nord、onedark 等

" ------------------------------
" 快捷键配置
" ------------------------------
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <Leader>n :NERDTreeFind<CR>
nnoremap <silent> <C-p> :Files<CR>
nnoremap <Space>e :e ./<C-d>
" toggle 最大化当前窗口
nnoremap <silent> <leader>m :MaximizerToggle<CR>
nnoremap <silent> <Leader>= :set nowinfixwidth<Bar>wincmd =<CR>

" ------------------------------
" 用 rg 进行匹配
" ------------------------------
command! -bang -nargs=* Rg call fzf#vim#grep(
      \ 'rg --column --line-number --no-heading --color=always --smart-case --hidden --with-filename --glob "!{.git,node_modules}/*" '.shellescape(<q-args>), 1,
      \ fzf#vim#with_preview(), <bang>0)


" cscope
if has("cscope")
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    set cscopetag
    set csto=0
    set cst
    set nocsverb
    " 自动加载 cscope 数据库
    if filereadable("cscope.out")
        cs add cscope.out
    endif
endif

"同时加载 ctags
set tags=./tags
nmap <F8> :TagbarToggle<CR>  " 按 F8 切换 Tagbar

" cscope 应对的一些快捷键
" 查看光标下符号引用
nnoremap <leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
" 查看那些函数调用了这函数
nnoremap <leader>cc :cs find c <C-R>=expand("<cword>")<CR><CR>
" 查看被哪些函数调用
nnoremap <leader>cd :cs find d <C-R>=expand("<cword>")<CR><CR>
" 查看光标下的函数定义
nnoremap <leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
" 找字符串
nnoremap <leader>ct :cs find t <C-R>=expand("<cword>")<CR><CR>

" 在 Vim 中绑定快捷键（类似 LSP）
nnoremap <silent> <Leader>gd :!global -d <C-R>=expand("<cword>")<CR><CR>
nnoremap <silent> <Leader>gr :!global -r <cword><CR>


" 或者，保存时自动执行：
autocmd BufWritePre *.cpp,*.h,*.cc :%!clang-format
